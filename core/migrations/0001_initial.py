# Generated by Django 3.2.25 on 2025-06-17 06:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gsez_card_issue_date', models.DateField(blank=True, null=True)),
                ('gsez_card_expiry_date', models.DateField(blank=True, null=True)),
                ('gsezid', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='profile_photos/')),
                ('emergency_contact_numbers', models.TextField(blank=True, null=True)),
                ('family_members', models.TextField(blank=True, null=True)),
                ('current_address', models.TextField(blank=True, null=True)),
                ('is_permanent', models.BooleanField(default=False)),
                ('permanent_address', models.TextField(blank=True, null=True)),
                ('current_employer', models.CharField(blank=True, max_length=200, null=True)),
                ('current_employer_join_date', models.DateField(blank=True, null=True)),
                ('current_employer_emp_code', models.CharField(blank=True, max_length=100, null=True)),
                ('current_employer_designation', models.CharField(blank=True, max_length=100, null=True)),
                ('current_employer_department', models.CharField(blank=True, max_length=100, null=True)),
                ('current_employer_remarks', models.TextField(blank=True, null=True)),
                ('current_employer_rating', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('previous_employers', models.TextField(blank=True, null=True)),
                ('qualifications', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('blocked', 'Blocked'), ('terminated', 'Terminated'), ('under_surveillance', 'Under Surveillance')], default='active', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='qr_codes/')),
                ('user_type', models.CharField(choices=[('user', 'User'), ('admin', 'Admin'), ('hr', 'HR'), ('security', 'Security')], default='user', max_length=10)),
                ('is_required_profile_detail', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('govt_id_number', models.CharField(max_length=100)),
                ('govt_id_photo', models.ImageField(upload_to='documents/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='current_employer_company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='core.company'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
